//returns whether or not a sorted array has a pair that adds to the given sums



import java.lang.Math; // headers MUST be above the first class

// one class needs to have a main() method
public class HelloWorld
{
  // arguments are passed using the text field below this editor
  public static void main(String[] args)
  {
    //BinarySearch mySearcher = new BinarySearch();
    int[] test1 = {1, 3, 5, 7, 8, 10, 11, 15, 18, 20, 25};
    int sum1 = 21;
    System.out.println("Testing with first solution!!");
    firstSolution(test1, sum1);
    System.out.println("Testing with second solution!!");
    secondSolution(test1, sum1);
    //System.out.println(mySearcher.search(test1, 12));
  }
  
  //runs in nlogn time and uses binary search
	public static boolean firstSolution(int[] input, int sum){
      BinarySearch mySearcher = new BinarySearch();
      for (int i = 0; i < input.length; i++){
      	int current = input[i];
        int target = sum - current;
        int index = mySearcher.search(input, target, i+1);
        if (index != -1){
        	System.out.println("Found, index 1 is: " + i + " and index 2 is: " + index);
            return true;
        }
      }
      System.out.println("not found!!");
      return false;
	}	
  
  //runs in O(n) time 
  public static boolean secondSolution(int[] input, int sum){
    int L = 0;
    int R = input.length -1;
    while(L < R){
      int testSum = input[L] + input[R];
      if (sum == testSum){
      	System.out.println("Found, index 1 is: " + L + " and index 2 is: " + R);
        return true;
      }else if(testSum > sum){
      	R = R - 1;
      }else{
      	L = L + 1;
      }
      
    }
    System.out.println("not found!!");
    return false;
  }
  
  
}





// you can add other public classes to this editor in any order
public class BinarySearch
{
  
  
  
  public BinarySearch(){
    
  }
  
  //returns the index of the target element in input array
  //will return -1 if the element is not found
  public int search(int[] input, int target, int startL){
    int L = startL;
    int R = input.length - 1;
    
    while (R>=L){
      int index = (L+R)/2;
      int current = input[index];
      if (current > target){
      	R = index -1;
      }else if (current < target){
        L = index + 1;
      }else{
      	return index;
      }
      
    
    }
    
    return -1;
    
  }
  
  
  
  

  
}
